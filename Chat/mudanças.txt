128 - char nick_tag[1] = "N";       ->      char nick_tag = 'N';
    [Se colocar com aspas duplas, C vai interpretar como string e adicionar \0 no final (teria que declarar como nick_tag[2])]

146 - nick_package = malloc(strlen(nick) + 1 + 4); // tag + int   - somar \0 ??     ->      nick_package = malloc(sizeof(char) + sizeof(int) + strlen(nick)+1);
    [Só pra que seja independente de arquitetura (em versões mais antigas do C, int era representado por 2 bits)
     strlen() não inclui o \0 na contagem, por isso o +1]

147 - package_length = strlen(nick) + 5;        ->      package_length = sizeof(char) + sizeof(int) + strlen(nick)+1;
    [Mesmo motivo acima]

151 - sprintf(nick_package,"%s%s%d",nick_tag, nick_tag, package_length);        ->      sprintf(nick_package,"%c%d%s",nick_tag, package_length, nick);
    [Não entendi o "%s%s%d" nem os parâmetros, se eu tiver feito merda me avisa pf hahah]


151 - sprintf(nick_package,"%c%d%s",nick_tag, package_length, nick);
    [Na real parando pra pensar, será que não é melhor ter uma struct pra cada tipo de mensagem?
     Vai facilitar um monte na leitura das mensagens, é só fazer um ponteiro da struct apontar
     pro buffer... Criei uma no interfaces.h só pra demonstrar como seria, dá uma olhada e
     me diz o que tu acha]
